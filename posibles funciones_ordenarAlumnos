
// Funciones para ordenar alumnos:

// La función "ordenarPorCurso" utiliza la función "qsort" para ordenar los alumnos en el arreglo según su curso,
// la función recibe como parámetro un puntero a un arreglo de estructuras de tipo "alumno" y un entero "numAlumnos",
// y utiliza la función "compararPorCurso" como criterio de ordenamiento.

void ordenarPorCurso(struct alumno *alumnos, int numAlumnos) {
    qsort(alumnos, numAlumnos, sizeof(struct alumno), compararPorCurso);
}

// La función "compararPorCurso" es una función de comparación utilizada por "qsort" para determinar el orden de
// los elementos en el arreglo, recibe como parámetros dos elementos del arreglo, los convierte en estructuras de
// tipo "alumno" y compara sus cursos para determinar el orden.

int compararPorCurso(const void *a, const void *b) {
    struct alumno *alumnoA = (struct alumno *)a;
    struct alumno *alumnoB = (struct alumno *)b;
    return alumnoA->curso - alumnoB->curso;
}

// La función "ordenarPorApellidos" es similar a "ordenarPorCurso", pero utiliza la función "compararPorApellidos"
// como criterio de ordenamiento y ordena los alumnos según sus apellidos.

void ordenarPorApellidos(struct alumno *alumnos, int numAlumnos) {
    qsort(alumnos, numAlumnos, sizeof(struct alumno), compararPorApellidos);
}

//La función "compararPorApellidos" es una función de comparación utilizada por "qsort" para determinar el orden
// de los elementos en el arreglo, recibe como parámetros dos elementos del arreglo, los convierte en estructuras
// de tipo "alumno" y compara sus apellidos para determinar el orden.


int compararPorApellidos(const void *a, const void *b) {
    struct alumno *alumnoA = (struct alumno *)a;
    struct alumno *alumnoB = (struct alumno *)b;
    return strcmp(alumnoA->apellidos, alumnoB->apellidos);
}
